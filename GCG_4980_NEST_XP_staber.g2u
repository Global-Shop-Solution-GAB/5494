Program.Sub.ScreenSU.Start
Gui.FNestExport..Create
Gui.FNestExport..Caption("Standard Nesting Export Interface")
Gui.FNestExport..Size(21105,12675)
Gui.FNestExport..MinX(0)
Gui.FNestExport..MinY(0)
Gui.FNestExport..Position(0,0)
Gui.FNestExport..BackColor(-2147483633)
Gui.FNestExport..MousePointer(0)
Gui.FNestExport..MaxButton(False)
Gui.FNestExport..Sizeable(False)
Gui.FNestExport..Event(UnLoad,FNestExport_UnLoad)
Gui.FNestExport.GsGCJobs.Create(GsGridControl)
Gui.FNestExport.GsGCJobs.Size(20835,11100)
Gui.FNestExport.GsGCJobs.Position(30,975)
Gui.FNestExport.GsGCJobs.Event(ColumnFilterChanged,GsGCJobs_ColumnFilterChanged)
Gui.FNestExport.dtpFromDate.Create(DatePicker)
Gui.FNestExport.dtpFromDate.Size(2880,285)
Gui.FNestExport.dtpFromDate.Position(2910,525)
Gui.FNestExport.cmdXP.Create(Button)
Gui.FNestExport.cmdXP.Size(2880,405)
Gui.FNestExport.cmdXP.Position(12150,465)
Gui.FNestExport.cmdXP.Caption("Export")
Gui.FNestExport.cmdXP.FontSize(12)
Gui.FNestExport.cmdXP.Event(Click,cmdXP_Click)
Gui.FNestExport.dtpToDate.Create(DatePicker)
Gui.FNestExport.dtpToDate.Size(2880,285)
Gui.FNestExport.dtpToDate.Position(6030,525)
Gui.FNestExport.lbl1.Create(Label,"Scheduled Start Date",True,2625,255,0,2910,210,True,0,"Arial",12,-2147483633,0)
Gui.FNestExport.lbl1.FontStyle(True,False,False,False,False)
Gui.FNestExport.lbl2.Create(Label,"Scheduled End Date",True,2505,255,0,6030,210,True,0,"Arial",12,-2147483633,0)
Gui.FNestExport.lbl2.FontStyle(True,False,False,False,False)
Gui.FNestExport.cmdPopGrid.Create(Button)
Gui.FNestExport.cmdPopGrid.Size(2880,405)
Gui.FNestExport.cmdPopGrid.Position(9075,465)
Gui.FNestExport.cmdPopGrid.Caption("Populate Grid")
Gui.FNestExport.cmdPopGrid.FontSize(12)
Gui.FNestExport.cmdPopGrid.Event(Click,cmdPopGrid_Click)
Gui.FNestExport.lbl3.Create(Label,"i",True,285,300,0,5505,180,True,2,"Arial",8,-2147483633,0)
Gui.FNestExport.lbl3.FontStyle(True,True,False,False,False)
Gui.FNestExport.lbl3.ForeColor(14772545)
Gui.FNestExport.lbl3.ToolTip("Scheduled date only")
Gui.FNestExport.lbl4.Create(Label,"i",True,270,300,0,8640,180,True,2,"Arial",8,-2147483633,0)
Gui.FNestExport.lbl4.ForeColor(14772545)
Gui.FNestExport.lbl4.ToolTip("Scheduled date only")
Gui.FNestExport.lbl4.FontStyle(True,True,False,False,False)
Gui.FNestExport.chkIncludeXP.Create(CheckBox)
Gui.FNestExport.chkIncludeXP.Size(2580,360)
Gui.FNestExport.chkIncludeXP.Position(15255,480)
Gui.FNestExport.chkIncludeXP.Caption("Include Exported Jobs")
Gui.FNestExport.chkIncludeXP.Value(1)
Gui.FNestExport.ddlProfile.Create(DropDownList)
Gui.FNestExport.ddlProfile.Size(2640,330)
Gui.FNestExport.ddlProfile.Position(30,495)
Gui.FNestExport.ddlProfile.Event(Click,ddlProfile_Click)
Gui.FNestExport.lbl5.Create(Label,"Select Profile",True,2625,255,0,30,210,True,0,"Arial",12,-2147483633,0)
Gui.FNestExport.chkPrintBCWODetail.Create(CheckBox)
Gui.FNestExport.chkPrintBCWODetail.Size(2415,360)
Gui.FNestExport.chkPrintBCWODetail.Position(18000,480)
Gui.FNestExport.chkPrintBCWODetail.Caption("Print BarCode WO Detail")
Gui.FNestExport.chkPrintBCWODetail.Event(Click,chkPrintBCWODetail_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sXPtype.Declare
v.Global.sProfile.Declare
v.Global.sXPPATH.Declare
v.Global.sBarCodePath.Declare
v.Global.sFilter.Declare
v.Global.bCustom.Declare
v.Global.bNonInv.Declare
v.Global.bImported.Declare
V.Global.bAutoExport.Declare(Boolean, False)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_4980_NEST_XP.g2u
'Ashwin D, Trey S
'This script is the export portion of the standard nesting interface
'It can either be run as a menu item where the user can choose which jobs to export
'or run from online update and automatically export eligible jobs

F.Intrinsic.Control.SelectCase(V.Caller.Hook)
	F.Intrinsic.Control.Case(38130)
		'post online update hook

		
		F.Intrinsic.Control.CallSub(OnlineUpdate)
	
	F.Intrinsic.Control.CaseElse
		F.ODBC.Connection!conx.OpenCompanyConnection
		
		f.Intrinsic.Control.CallSub(LoadProfile)
		F.Intrinsic.Control.CallSub(PreFolderCheck)
		f.Intrinsic.Control.CallSub(EmptyJobData)
		f.Intrinsic.Control.CallSub(FormatJobGrid)
		f.Intrinsic.Control.CallSub(LoadContextMenu)
		gui.FNestExport..Show	
F.Intrinsic.Control.EndSelect
Program.Sub.Main.End

Program.Sub.FormatJobGrid.Start
f.Data.Dataview.Create("JobData","JobDataVw",22)
gui.FNestExport.GsGCJobs.AddGridviewFromDataview("JobsGrid","JobData","JobDataVw")

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Selected","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Selected","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Selected","caption","Selected")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Selected","readonly", False)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Selected","allowedit", True)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Selected","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Job","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Job","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Job","caption","Job")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Job","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Job","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Job","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Suffix","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Suffix","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Suffix","caption","Suffix")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Suffix","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Suffix","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Suffix","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Seq","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Seq","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Seq","caption","Seq")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Seq","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Seq","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Seq","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FGPART","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FGPART","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FGPART","caption","FG Part")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FGPART","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FGPART","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FGPART","MinWidth", 80)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","description","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","description","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","description","caption","FG Description")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","description","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","description","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","description","MinWidth", 120)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","caption","Date Due")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","DisplayCustomDatetime", "d")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","DATE_DUE","MinWidth", 80)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","WC","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","WC","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","WC","caption","WC")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","WC","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","WC","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","WC","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CUSTOMER","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CUSTOMER","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CUSTOMER","caption","Customer ID")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CUSTOMER","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CUSTOMER","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CUSTOMER","MinWidth", 60)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","NAME_CUSTOMER","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","NAME_CUSTOMER","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","NAME_CUSTOMER","caption","Customer Name")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","NAME_CUSTOMER","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","NAME_CUSTOMER","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","NAME_CUSTOMER","MinWidth", 120)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAW_MAT","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAW_MAT","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAW_MAT","caption","Raw Mat")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAW_MAT","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAW_MAT","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAW_MAT","MinWidth", 100)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAWMAT_QTY","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAWMAT_QTY","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAWMAT_QTY","caption","RM Qty")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAWMAT_QTY","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAWMAT_QTY","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","RAWMAT_QTY","MinWidth", 40)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CODE_SORT","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CODE_SORT","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CODE_SORT","caption","Sort Code")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CODE_SORT","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CODE_SORT","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CODE_SORT","MinWidth", 80)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PRIORITY","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PRIORITY","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PRIORITY","caption","Priority")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PRIORITY","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PRIORITY","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PRIORITY","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PROJECT","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PROJECT","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PROJECT","caption","Project")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PROJECT","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PROJECT","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","PROJECT","MinWidth", 60)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Phase","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Phase","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Phase","caption","Phase")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Phase","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Phase","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Phase","MinWidth", 40)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Department","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Department","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Department","caption","Dept")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Department","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Department","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","Department","MinWidth", 45)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","SO_HD_LN","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","SO_HD_LN","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","SO_HD_LN","caption","SO")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","SO_HD_LN","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","SO_HD_LN","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","SO_HD_LN","MinWidth", 60)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order","caption","SO HD")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order","MinWidth", 50)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CustPO","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CustPO","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CustPO","caption","Cust. PO")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CustPO","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CustPO","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","CustPO","MinWidth", 50)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order_line","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order_line","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order_line","caption","SO LN")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order_line","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order_line","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","sales_Order_line","MinWidth", 40)

f.Intrinsic.Control.If(v.Caller.GSSVersion,<>,"2016.2")	
	gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FLAG_WO_RELEASED","headerforecolor", v.Color.PRI-GSS-00)
	gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FLAG_WO_RELEASED","headerfontbold", true)
	gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FLAG_WO_RELEASED","caption","Released?")
	gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FLAG_WO_RELEASED","readonly", true)
	gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FLAG_WO_RELEASED","allowedit", false)
	gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","FLAG_WO_RELEASED","MinWidth", 60)
f.Intrinsic.Control.EndIf

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","exported","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","exported","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","exported","caption","XP?")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","exported","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","exported","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","exported","MinWidth", 30)

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","JSS","Visible", False)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","INVCHECK","Visible", False)

gui.FNestExport.GsGCJobs.AddStyleFormatCondition("JobsGrid","INVCHECK", "redtag", "equal", "Y")
gui.FNestExport.GsGCJobs.setstyleFormatConditionproperty("JobsGrid","INVCHECK", "redtag", "backcolor", "LightCoral" )
Gui.FNestExport.GsGCJobs.SetStyleFormatConditionProperty("JobsGrid", "INVCHECK", "redtag", "ApplyToRow", True)

gui.FNestExport.GsGCJobs.AddStyleFormatCondition("JobsGrid","Selected", "SelectTag", "equal", true)
gui.FNestExport.GsGCJobs.setstyleFormatConditionproperty("JobsGrid","Selected", "SelectTag", "backcolor", "PaleGreen" )
Gui.FNestExport.GsGCJobs.SetStyleFormatConditionProperty("JobsGrid", "Selected", "SelectTag", "ApplyToRow", True)
f.Intrinsic.Control.If(v.Caller.GSSVersion,<>,"2016.2")	
	gui.FNestExport.GsGCJobs.AddStyleFormatCondition("JobsGrid","FLAG_WO_RELEASED", "Warntag", "equal", "Y")
	gui.FNestExport.GsGCJobs.setstyleFormatConditionproperty("JobsGrid","FLAG_WO_RELEASED", "Warntag", "backcolor", "LightCyan" )
f.Intrinsic.Control.EndIf

gui.FNestExport.GsGCJobs.AddStyleFormatCondition("JobsGrid","exported", "XPTag", "equal", "Y")
gui.FNestExport.GsGCJobs.setstyleFormatConditionproperty("JobsGrid","exported", "XPTag", "backcolor", "Red" )

gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","headerforecolor", v.Color.PRI-GSS-00)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","headerfontbold", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","caption","Schedule Date")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","DisplayCustomDatetime", "d")
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","readonly", true)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","allowedit", false)
gui.FNestExport.GsGCJobs.SetColumnProperty("JobsGrid","BDATE","MinWidth", 80)

gui.FNestExport.GsGCJobs.SetGridviewProperty("JobsGrid","Enableappearanceoddrow",True)
gui.FNestExport.GsGCJobs.SetGridviewProperty("JobsGrid","OptionsFindAlwaysVisible",False)
gui.FNestExport.GsGCJobs.SetGridviewProperty("JobsGrid","Showgrouppanel",False)
gui.FNestExport.GsGCJobs.SetGridviewProperty("JobsGrid","OptionsViewShowAutoFilterRow",True)
f.Intrinsic.Control.CallSub(DeSerialize)
gui.FNestExport.GsGCJobs.MainView("JobsGrid")
Program.Sub.FormatJobGrid.End

Program.Sub.LoadProfile.Start
f.Data.DataTable.CreateFromSQL("ProfDT","Conx","Select PROFILE,XPTYPE,DEFAULT_PROFILE,EXPORT_FOLDER,CUSTOM_EXPORT,XP_ON_GENWO,FULL_PART_FLAG,FULL_PART_PATH from GCG_4980_NESTPROFILE where PROFILE in (SELECT DISTINCT PROFILE from GCG_4980_NESTPROFILE where RTRIM(XPTYPE) <> '')",true)
f.Intrinsic.Control.If(v.DataTable.ProfDT.RowCount,=,0)
	f.Intrinsic.UI.Msgbox("You need to setup your profiles in the standard nesting maintenance menu.")
	f.ODBC.Connection!conx.Close
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.BlockEvents

gui.FNestExport.ddlProfile.AddItems("DataTable","ProfDT","PROFILE","PROFILE")
f.Data.DataView.Create("ProfDT","ProfVw",22,"DEFAULT_PROFILE = True","")
f.Intrinsic.Control.UnBlockEvents
f.Intrinsic.Control.If(v.DataView.ProfDT!ProfVw.RowCount,>,0)
	gui.FNestExport.ddlProfile.Text(v.DataView.ProfDT!ProfVw(0).PROFILE!fieldVal)
	v.Global.sProfile.Set(v.DataView.ProfDT!ProfVw(0).PROFILE!fieldVal)
	v.Global.bCustom.Set(v.DataView.ProfDT!ProfVw(0).CUSTOM_EXPORT!fieldVal)
	v.Global.sXPPATH.Set(v.DataView.ProfDT!ProfVw(0).EXPORT_FOLDER!fieldValTrim)
	v.Global.sXPtype.Set(v.DataView.ProfDT!ProfVw(0).XPTYPE!fieldValTrim)
f.Intrinsic.Control.Else
	gui.FNestExport.ddlProfile.Text(v.DataTable.ProfDT(0).PROFILE!fieldVal)
	v.Global.sProfile.Set(v.DataTable.ProfDT(0).PROFILE!fieldVal)
	v.Global.bCustom.Set(v.DataTable.ProfDT(0).CUSTOM_EXPORT!fieldVal)
	v.Global.sXPPATH.Set(v.DataTable.ProfDT(0).EXPORT_FOLDER!fieldValTrim)
	v.Global.sXPTYPE.Set(v.DataTable.ProfDT(0).EXPORT_FOLDER!fieldValTrim)
f.Intrinsic.Control.EndIf
Program.Sub.LoadProfile.End

Program.Sub.ddlProfile_Click.Start
v.Local.sSQL.Declare
v.Local.sFilter.Declare

f.Intrinsic.String.Build("PROFILE = '{0}'",v.Screen.FNestExport!ddlProfile.text,v.Local.sFilter)
f.Data.DataView.SetFilter("ProfDT","ProfVw",v.Local.sFilter)

v.Global.sProfile.Set(v.Screen.FNestExport!ddlProfile.text)
v.Global.bCustom.Set(v.DataView.ProfDT!ProfVw(0).CUSTOM_EXPORT!fieldVal)
v.Global.sXPPATH.Set(v.DataView.ProfDT!ProfVw(0).EXPORT_FOLDER!fieldValTrim)
v.Global.sXPtype.Set(v.DataView.ProfDT!ProfVw(0).XPTYPE!fieldValTrim)
Program.Sub.ddlProfile_Click.End

Program.Sub.EmptyJobData.Start
f.Data.DataTable.Create("JobData",true)
f.Data.DataTable.AddColumn("JobData","Selected","Boolean")
f.Data.DataTable.AddColumn("JobData","Exported","String")
f.Data.DataTable.AddColumn("JobData","Job","String")
f.Data.DataTable.AddColumn("JobData","suffix","String")
f.Data.DataTable.AddColumn("JobData","Seq","String")
f.Data.DataTable.AddColumn("JobData","FGPART","String")
f.Data.DataTable.AddColumn("JobData","Description","String")
f.Intrinsic.Control.If(v.Caller.GSSVersion,<>,"2016.2")
	f.Data.DataTable.AddColumn("JobData","Flag_WO_Released","String")
f.Intrinsic.Control.EndIf
f.Data.DataTable.AddColumn("JobData","Date_due","Date")
f.Data.DataTable.AddColumn("JobData","CUSTOMER","String")
f.Data.DataTable.AddColumn("JobData","NAME_CUSTOMER","String")
f.Data.DataTable.AddColumn("JobData","WC","String")
f.Data.DataTable.AddColumn("JobData","RAW_MAT","String")
f.Data.DataTable.AddColumn("JobData","RAWMAT_QTY","Float")
f.Data.DataTable.AddColumn("JobData","CODE_SORT","String")
f.Data.DataTable.AddColumn("JobData","PRIORITY","String")
f.Data.DataTable.AddColumn("JobData","PROJECT","String")
f.Data.DataTable.AddColumn("JobData","Phase","String")
f.Data.DataTable.AddColumn("JobData","Department","String")
f.Data.DataTable.AddColumn("JobData","SO_HD_LN","String")
f.Data.DataTable.AddColumn("JobData","sales_Order","String")
f.Data.DataTable.AddColumn("JobData","sales_Order_line","String")
f.Data.DataTable.AddColumn("JobData","JSS","String")
f.Data.DataTable.AddColumn("JobData","INVCHECK","String")
f.Data.DataTable.AddColumn("JobData","CustPO","String")
f.Data.DataTable.AddColumn("JobData","BDATE","Date")
Program.Sub.EmptyJobData.End

Program.Sub.cmdPopGrid_Click.Start
v.Local.sSql.Declare
v.Local.sFilter.Declare
v.Local.dFromDt.Declare
v.Local.dToDt.Declare
v.Local.dFromDt.Set(v.Screen.FNestExport!dtpFromDate.value)
v.Local.dToDt.Set(v.Screen.FNestExport!dtpToDate.value)
v.Local.bExists.Declare
v.Local.sListVw.Declare
v.Local.icount.Declare

gui.FNestExport..Enabled(false)
f.Intrinsic.Control.If(v.Local.dFromDt,>,v.Local.dToDt)
	gui.FNestExport..Enabled(True)
	gui.FNestExport..SetFocus
	f.Intrinsic.UI.Msgbox("The from date cannot be greater than the to date")
f.Intrinsic.Control.EndIf

f.Intrinsic.UI.InvokeWaitDialog("Loading Grid")
f.Intrinsic.Control.If(v.DataTable.JobData.Exists)
	f.Data.DataTable.Close("JobData")
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("SELECT Job + suffix + Seq as JSS,JOB, SUFFIX, SEQ,DATE_DUE,RTRIM(' ') as RAW_MAT,CAST(0 as DOUBLE) as RAWMAT_QTY,RTRIM(' ') as CODE_SORT from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' {0}",v.Ambient.Null,v.Local.sSql)

f.Data.DataTable.CreateFromSQL("JobOp","conx",v.Local.sSQL)

f.Intrinsic.Control.If(v.Caller.GSSVersion,=,"2016.2")
	f.Intrinsic.String.Build("Select job,suffix,PART as FGPART,RTRIM(Description) as Description,Date_due,CUSTOMER ,RTRIM(' ') as NAME_CUSTOMER,PRIORITY ,PRODUCT_LINE, PROJECT , Phase, concat(Sales_Order,concat('-',Sales_Order_Line)) as SO_HD_LN,sales_Order,Sales_Order_Line,exported from V_Job_Header {0}",v.Ambient.Null,v.Local.sSQL)
f.Intrinsic.Control.Else

	f.Intrinsic.String.Build("Select job,suffix,PART as FGPART,RTRIM(Description) as Description,Date_due,CUSTOMER ,RTRIM(' ') as NAME_CUSTOMER,PRIORITY ,PRODUCT_LINE, PROJECT , Phase, concat(Sales_Order,concat('-',Sales_Order_Line)) as SO_HD_LN,sales_Order,Sales_Order_Line,FLAG_WO_RELEASED,exported from V_Job_Header {0}",v.Ambient.Null,v.Local.sSQL)
f.Intrinsic.Control.EndIf

f.data.DataTable.CreateFromSQL("JobHD","Conx",v.Local.sSQL)

f.Data.Dictionary.CreateFromSQL("CustDict","Conx","Select Customer, RTRIM(Name_Customer) from V_CUSTOMER_MASTER")
f.Data.Dictionary.SetDefaultReturn("CustDict","")
f.Data.DataTable.FillFromDictionary("JobHD","CustDict","CUSTOMER","NAME_CUSTOMER")
f.Data.Dictionary.Close("CustDict")

f.Intrinsic.Control.If(v.Caller.GSSVersion,<>,"2016.2")	
	f.Data.linq.Join("InnerJoin","DataTable","JobOp*!*a","DataTable","JobHD*!*b","a.job=b.job AND a.suffix = b.suffix","a.Job*!*a.suffix*!*a.Seq*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*b.FGPART*!*b.Description*!*b.Date_due*!*b.CUSTOMER*!*b.NAME_CUSTOMER*!*b.PRIORITY*!*b.PROJECT*!*b.Phase*!*b.SO_HD_LN*!*b.sales_Order*!*b.sales_Order_line*!*a.JSS*!*b.FLAG_WO_RELEASED*!*b.exported","","","","JobOpHd",false)

f.Intrinsic.control.Else
	f.Data.linq.Join("InnerJoin","DataTable","JobOp*!*a","DataTable","JobHD*!*b","a.job=b.job AND a.suffix = b.suffix","a.Job*!*a.suffix*!*a.Seq*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*b.FGPART*!*b.Description*!*b.Date_due*!*b.CUSTOMER*!*b.NAME_CUSTOMER*!*b.PRIORITY*!*b.PROJECT*!*b.Phase*!*b.SO_HD_LN*!*b.sales_Order*!*b.sales_Order_line*!*a.JSS*!*b.exported","","","","JobOpHd",false)
f.Intrinsic.Control.EndIf

f.data.DataTable.Close("JobOp")
f.data.DataTable.Close("JobHD")

f.Intrinsic.Control.If(v.Screen.FNestExport!chkIncludeXP.CheckedAsBoolean)
	f.Intrinsic.String.Build("Select distinct CAST(0 as bit) as Selected,Job, sfx as Suffix,Right(JSS,6) as seq, SAR as WC,ROG as Department,RTRIM(' ') as INVCHECK,JSS from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y') and HOURTYPE = 1 and bdate >= '{0}' and bdate <= '{1}' ",v.Local.dFromDt.PervasiveDate,v.Local.dToDt.PervasiveDate,v.Local.sSQL)

f.Intrinsic.Control.Else

	f.Intrinsic.String.Build("Select distinct CAST(0 as bit) as Selected,Job, sfx as Suffix,Right(JSS,6) as seq, SAR as WC,ROG as Department,RTRIM(' ') as INVCHECK,JSS from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y') and HOURTYPE = 1 and bdate >= '{0}' and bdate <= '{1}'  and job + sfx not in (Select Job + suffix as JS from V_JOB_HEADER where exported = 'Y')",v.Local.dFromDt.PervasiveDate,v.Local.dToDt.PervasiveDate,v.Local.sSQL)

f.Intrinsic.Control.EndIf

f.data.DataTable.CreateFromSQL("APSDT","Conx",v.Local.sSQL)
f.Intrinsic.Control.If(v.DataTable.APSDT.RowCount,=,0)
	f.Intrinsic.Control.GoTo("Empty")
f.Intrinsic.Control.EndIf

f.Data.DataTable.AddColumn("APSDT","BDATE","Date")
f.Data.Dictionary.CreateFromSQL("BDateDict","Conx","Select distinct JSS,BDate from APSV3_UBDETAIL order by bdate,jss desc")
f.Data.Dictionary.SetDefaultReturn("BDateDict","01/01/1900")
f.Data.DataTable.FillFromDictionary("APSDT","BDateDict","JSS","BDATE")
f.Data.Dictionary.Close("BDateDict")

f.Intrinsic.Control.If(v.DataTable.JobData.Exists,=,true)
	f.Data.DataView.SetFilter("JobData","JobDataVw","")
	f.Intrinsic.Control.CallSub(Serialize)
	gui.FNestExport.GsGCJobs.ClearRows("JobsGrid")
	f.data.DataView.Close("JobData","JobDataVw")
	f.data.DataTable.Close("JobData")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(v.Caller.GSSVersion,<>,"2016.2")	
	f.Data.linq.Join("InnerJoin","DataTable","APSDT*!*b","DataTable","JobOpHd*!*a","b.job=a.job AND b.suffix = a.suffix AND a.seq = b.seq","b.Selected*!*a.exported*!*a.Job*!*a.suffix*!*a.Seq*!*a.FGPART*!*a.Description*!*a.FLAG_WO_RELEASED*!*a.Date_due*!*b.BDATE*!*a.CUSTOMER*!*a.NAME_CUSTOMER*!*b.WC*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*a.PRIORITY*!*a.PROJECT*!*a.Phase*!*b.Department*!*a.SO_HD_LN*!*a.sales_Order*!*a.sales_Order_line*!*a.JSS*!*b.INVCHECK","","","","JobData",True)
f.Intrinsic.Control.Else
	f.Data.linq.Join("InnerJoin","DataTable","APSDT*!*b","DataTable","JobOpHd*!*a","b.job=a.job AND b.suffix = a.suffix AND a.seq = b.seq","b.Selected*!*a.exported*!*a.Job*!*a.suffix*!*a.Seq*!*a.FGPART*!*a.Description*!*a.Date_due*!*b.BDATE*!*a.CUSTOMER*!*a.NAME_CUSTOMER*!*b.WC*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*a.PRIORITY*!*a.PROJECT*!*a.Phase*!*b.Department*!*a.SO_HD_LN*!*a.sales_Order*!*a.sales_Order_line*!*a.JSS*!*b.INVCHECK","","","","JobData",True)
f.Intrinsic.Control.EndIf

f.data.DataTable.Close("APSDT")
f.data.DataTable.Close("JobOpHd")

f.Data.DataTable.AddColumn("JobData","CustPO","String")
f.Intrinsic.Control.If(v.DataTable.JobData.RowCount,=,0)

	f.data.DataTable.Close("JobData")
	f.Intrinsic.Control.Label("Empty")
	f.Intrinsic.Control.CallSub(EmptyJobData)	
f.Intrinsic.Control.EndIf

f.Data.DataTable.CreateFromSQL("MatSeq","conx","Select job,suffix,seq,part,Hours_Estimated from V_job_operations where LMO = 'M' and SEQ < '995000'")
f.Data.DataView.Create("MatSeq","TempVw","22")

f.Intrinsic.Control.If(v.DataTable.JobData.RowCount,>,0)
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.JobData.RowCount--,1)
		f.Intrinsic.String.Build("Job = '{0}' AND Suffix = '{1}' AND SEQ < '{2}'",v.DataTable.JobData(v.Local.icount).job!fieldVal,v.DataTable.JobData(v.Local.icount).suffix!fieldVal,v.DataTable.JobData(v.Local.icount).Seq!fieldVal,v.Local.sFilter)
		f.Data.DataView.SetFilter("MatSeq","TempVw",v.Local.sFilter)
		f.Data.DataView.SetSort("MatSeq","TempVw","SEQ DESC")
		f.Intrinsic.Control.If(v.DataView.MatSeq!TempVw.RowCount,>,0)
			f.Data.DataTable.SetValue("JobData",v.Local.iCount,"RAW_MAT",v.Dataview.MatSeq!TempVw(0).Part!fieldVal,"RAWMAT_QTY",v.Dataview.MatSeq!TempVw(0).Hours_Estimated!fieldValFloat)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.Next(v.Local.iCount)
f.Intrinsic.Control.EndIf
f.Data.DataView.Close("MatSeq","TempVw")

f.Data.DataTable.Close("MatSeq")

f.Data.Dictionary.CreateFromSQL("Invdict","Conx","Select PART, RTRIM(CODE_SORT) from V_INVENTORY_MSTR")
f.Data.Dictionary.SetDefaultReturn("Invdict","")
f.Data.DataTable.FillFromDictionary("JobData","Invdict","RAW_MAT","CODE_SORT")
f.Data.Dictionary.Close("Invdict")

f.Data.Dictionary.CreateFromSQL("CustPODict","Conx","Select Order_No, Customer_PO from V_Order_Header")
f.Data.Dictionary.SetDefaultReturn("CustPODict","")
f.Data.DataTable.FillFromDictionary("JobData","CustPODict","sales_Order","CustPO")
f.Data.Dictionary.Close("CustPODict")

f.Intrinsic.Control.CallSub(FormatJobGrid)
f.Intrinsic.UI.CloseWaitDialog

gui.FNestExport..SetFocus
gui.FNestExport..Enabled(true)
Program.Sub.cmdPopGrid_Click.End

Program.Sub.cmdXP_Click.Start
v.Local.sFilePath.Declare
v.Local.sCustom.Declare
v.Local.bExists.Declare
v.Local.sXPPath.Declare

gui.FNestExport..Enabled(false)

f.Intrinsic.Control.If(v.DataTable.JobData.Exists,=,false)

	F.Intrinsic.Control.If(V.Global.bAutoExport)
		F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "No valid Jobs found.")
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Msgbox("No Jobs Populated in grid for Export!")
		gui.FNestExport..Enabled(true)
		gui.FNestExport..SetFocus
		f.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(v.DataView.JobData!SelJobVw.Exists)
	f.Data.DataView.Close("JobData","SelJobVw")
f.Intrinsic.Control.EndIf
f.Data.DataView.Create("JobData","SelJobVw",22,"Selected = 1","")
f.Intrinsic.Control.If(v.DataView.JobData!SelJobVw.RowCount,=,0)
	
	F.Intrinsic.Control.If(V.Global.bAutoExport)
		F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "No valid Jobs found.")
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Msgbox("No Jobs selected for Export!")
		gui.FNestExport..Enabled(true)
		gui.FNestExport..SetFocus
		f.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.SelectCase(v.Global.sXPtype.Trim)
	f.Intrinsic.Control.Case("B")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 XML for BOOST")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")	
		f.Intrinsic.Control.CallSub(BoostXP)
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"EXPORTED","Y")
		
	f.Intrinsic.Control.Case("S")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 CSV for SigmaNest")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")	
		f.Intrinsic.Control.CallSub(SNestXP)
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"EXPORTED","Y")
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"SELECTED",False)
		
	f.Intrinsic.Control.Case("N")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 CSV for NCell")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")	
		f.Intrinsic.Control.CallSub(NCellXP)
		
	f.Intrinsic.Control.Case("P")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 CSV for ProNest")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")	
		f.Intrinsic.Control.CallSub(PNestXP)
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"EXPORTED","Y")
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"SELECTED",False)
		
	f.Intrinsic.Control.Case("O")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 CSV for OPS")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")	
		f.Intrinsic.Control.CallSub(OPSXP)	
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"EXPORTED","Y")
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"SELECTED",False)
		
	f.Intrinsic.Control.Case("A")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 CSV for Dr. Abe Nesting program")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")
		f.Intrinsic.Control.CallSub(DrAbeXP)
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"EXPORTED","Y")
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"SELECTED",False)
		
	f.Intrinsic.Control.Case("C")
		f.intrinsic.UI.InvokeWaitDialog("Compiling Data","Export 2 CSV for Custom Nesting program")
		f.intrinsic.Control.CallSub(Load4XP)
		
		f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists,=,false)
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.UI.InvokeWaitDialog("Generating Export File")
		f.Intrinsic.Control.CallSub(CustomXP)
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"EXPORTED","Y")
		f.Data.DataView.SetValue("JobData","SelJobVw",-1,"SELECTED",False)
		
	f.Intrinsic.Control.CaseElse
		
		F.Intrinsic.Control.If(V.Global.bAutoExport)
			F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "Please setup the export configuration in the Maintenance form before running an export.")
		F.Intrinsic.Control.Else
			f.Intrinsic.UI.Msgbox("Please setup the export configuration in the Maintenance form before running an export.")
			gui.FNestExport..Enabled(true)
			gui.FNestExport..SetFocus
			f.Intrinsic.Control.ExitSub	
		F.Intrinsic.Control.EndIf
		
f.Intrinsic.Control.EndSelect

f.Intrinsic.UI.CloseWaitDialog
f.Intrinsic.Control.If(v.Global.bNonInv)
	F.Intrinsic.Control.If(V.Global.bAutoExport)
		F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "Export was partially successful. Please check jobs to see if there is sufficient inventory on hand for their corresponding raw material in Global shop.")
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Export was partially successful. Please check highlighted jobs to see if there is sufficient inventory on hand for their corresponding raw material in Global shop.")
	F.Intrinsic.Control.EndIf
	v.Global.bNonInv.Set(false)
f.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Global.bAutoExport.Not)
		f.Intrinsic.UI.Msgbox("Export Successful!")
	F.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.EndIf

gui.FNestExport..Enabled(true)
gui.FNestExport..SetFocus
Program.Sub.cmdXP_Click.End

Program.Sub.Load4XP.Start
v.Local.sSQL.Declare
v.Local.sWO.Declare
v.Local.sJob.Declare
v.Local.sJobs.Declare
v.Local.sSuffix.Declare
v.Local.sSeq.Declare
v.Local.icount.Declare
v.Local.sFilter.Declare
v.Local.sCount.Declare
v.Local.sRet.Declare
v.Local.fUnits.declare

f.Intrinsic.Control.If(v.DataTable.WOSOINV.Exists)
	f.Data.DataTable.Close("WOSOINV")
f.Intrinsic.Control.EndIf
f.Data.DataView.ToString("JobData","SelJobVw","JSS","","','",v.Local.sJobs)
Function.Intrinsic.UI.ChangeWaitStatus("Loading Data", 0) 

f.Intrinsic.Control.If(v.Global.sXPtype.trim,=,"O")
	f.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQ,RTRIM(' ') as UNITS, concat(Concat(concat(Job,concat('-',suffix)),'-'),SEQ) as C01,JOB + SUFFIX + SEQ AS JSS,(SELECT TOP 1 RTRIM(DESCRIPTION) FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND LMO = 'C' AND SEQ > A.SEQ AND SEQ < ISNULL((SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND SEQ > A.SEQ AND SEQ < '995000' AND LMO = 'L' ),'995000'))  as C34,Concat(CONCAT(Substring(LEFT(CONVERT(date_due, sql_char),10),1,4),Substring(LEFT(CONVERT(date_due, sql_char),10),6,2)),Substring(LEFT(CONVERT(date_due, sql_char),10),9,2)) as C00,RTRIM(' ') as C33,RTRIM(' ') as C48, job as C88, RTRIM(Suffix) as C89, Seq as C90,RTRIM(' ') as C91 from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and job + suffix + Seq in ('{0}') ",v.Local.sJobs,v.Local.sSql)

f.Intrinsic.Control.Else
	f.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQ,RTRIM(' ') as UNITS, concat(Concat(concat(Job,concat('-',suffix)),'-'),SEQ) as C01,JOB + SUFFIX + SEQ AS JSS,(SELECT TOP 1 RTRIM(DESCRIPTION) FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND LMO = 'C' AND SEQ > A.SEQ AND SEQ < ISNULL((SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND SEQ > A.SEQ AND SEQ < '995000' AND LMO = 'L' ),'995000'))  as C34,DATE_DUE as C00,RTRIM(' ') as C33,RTRIM(' ') as C48, job as C88, RTRIM(Suffix) as C89, Seq as C90,RTRIM(' ') as C91 from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and job + suffix + Seq in ('{0}') ",v.Local.sJobs,v.Local.sSql)
f.Intrinsic.Control.EndIf

f.Data.DataTable.CreateFromSQL("JobOp","conx",v.Local.sSQL)

f.Data.Dictionary.CreateFromSQL("WCDict","conx","Select distinct JSS,RTRIM(SAR) as WC from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y') and HOURTYPE = 1 order by bdate desc")
f.Data.Dictionary.SetDefaultReturn("WCDict","")
f.Data.DataTable.FillFromDictionary("JobOp","WCDict","JSS","C91")
f.Data.Dictionary.Close("WCDict")

f.Data.DataTable.CreateFromSQL("MatSeq","conx","Select job,suffix,seq,RTRIM(part) as part,Hours_Estimated as Units from V_job_operations where LMO = 'M' and SEQ < '995000'")
Function.Intrinsic.UI.ChangeWaitStatus("Loading Corresponding Raw Material", 5) 
f.Data.DataView.Create("MatSeq","TempVw","22")
f.Intrinsic.Control.If(v.DataTable.JobOp.RowCount,>,0)
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.JobOp.RowCount--,1)
		f.Intrinsic.String.Build("Job = '{0}' AND Suffix = '{1}' AND SEQ < '{2}'",v.DataTable.JobOp(v.Local.icount).job!fieldVal,v.DataTable.JobOp(v.Local.icount).suffix!fieldVal,v.DataTable.JobOp(v.Local.icount).Seq!fieldVal,v.Local.sFilter)
		f.Data.DataView.SetFilter("MatSeq","TempVw",v.Local.sFilter)
		f.Data.DataView.SetSort("MatSeq","TempVw","SEQ DESC")
		f.Intrinsic.Control.If(v.DataView.MatSeq!TempVw.RowCount,>,0)
			f.Data.DataTable.SetValue("JobOp",v.Local.iCount,"UNITS",v.Dataview.MatSeq!TempVw(0).Units!fieldValFloat)
			f.Data.DataTable.SetValue("JobOp",v.Local.iCount,"C48",v.Dataview.MatSeq!TempVw(0).Part!fieldValTrim)
			f.Data.DataTable.SetValue("JobOp",v.Local.iCount,"C33",v.Dataview.MatSeq!TempVw(0).Part!fieldValTrim)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.Next(v.Local.iCount)
f.Intrinsic.Control.EndIf
f.Data.DataView.Close("MatSeq","TempVw")

f.Data.DataTable.Close("MatSeq")

Function.Intrinsic.UI.ChangeWaitStatus("Loading Corresponding Raw Material", 35) 

'this was used for an inventory check, no longer doing that
f.Data.DataView.Create("JobOp","JobOpVw",22)
f.Data.DataView.ToDataTable("JobOp","JobOpVw","JobOps")
F.Data.DataView.Close("JobOp","JobOpVw")
F.Data.DataTable.Close("JobOp")

'maybe should change this?
f.Intrinsic.Control.If(v.DataTable.JobOps.RowCount,=,0)
	f.data.DataTable.Close("JobOps")
	F.Intrinsic.Control.If(V.Global.bAutoExport)
		F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "No Jobs exported. Please check if you have inventory on hand for the raw materials associated with the jobs.")
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Msgbox("No Jobs exported. Please check if you have inventory on hand for the raw materials associated with the highlighted jobs.")	
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.EndIf

Function.Intrinsic.UI.ChangeWaitStatus("Compiling data from Work Orders", 70) 
f.Intrinsic.String.Build("Select job,suffix,RTRIM(concat(Job,concat('-',suffix))) as C02,RTRIM(Router) as C03,RTRIM(Description) as C04, RTRIM(Part) as C05,RTRIM(LEFT(Part,17)) as C82,RTRIM(Right(Part,3)) as C83,RTRIM(LOCATION)  as C84,RTRIM(CUSTOMER) as C07,RTRIM(' ') as C08,AMT_PRICE_PER_UNIT as C09,PRIORITY as  C10,PRODUCT_LINE as C11, PROJECT as C12, Phase as C13, concat(Sales_Order,concat('-',Sales_Order_Line)) as C14, QTY_ORDER as C15,CUSTOMER_PO as C16, RTRIM(COMMENTS_1) as C17, RTRIM(COMMENTS_2) as C18, RTRIM(Comments_3) as C19, RTRIM(Drawing_Customer) as C20,RTRIM(part_customer) as C21, concat(PARENT_WO,concat('-',PARENT_SUFFIX_PARENT)) as C22,RTRIM(sales_Order) as sales_Order,RTRIM(Sales_Order_Line) as Sales_Order_Line from V_Job_Header {0}",v.Ambient.Null,v.Local.sSQL)
f.data.DataTable.CreateFromSQL("JobHD","Conx",v.Local.sSQL)

f.Data.Dictionary.CreateFromSQL("CustDict","Conx","Select RTRIM(Customer), RTRIM(Name_Customer) as C08 from V_CUSTOMER_MASTER")
f.Data.Dictionary.SetDefaultReturn("CustDict","")
f.Data.DataTable.FillFromDictionary("JobHD","CustDict","C07","C08")
f.Data.Dictionary.Close("CustDict")

f.Data.DataTable.CreateFromSQL("JobHDUsr","conx","select job,suffix, RTRIM(user_1) as C23, RTRIM(user_2) as C24,RTRIM(user_3) as C25,RTRIM(user_4) as C26,RTRIM(user_5 )as C27,RTRIM(user_6 )as C28,RTRIM(user_7) as C29,RTRIM(user_8) as C30,RTRIM(user_9) as C31,RTRIM(user_10) as C32 from V_WO_USER_FLDS")

f.Data.linq.Join("LeftJoin","DataTable","JobHD*!*a","DataTable","JobHDUsr*!*b","a.JOB=b.JOB AND a.SUFFIX = b.SUFFIX","a.JOB*!*a.SUFFIX*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*b.C23*!*b.C24*!*b.C25*!*b.C26*!*b.C27*!*b.C28*!*b.C29*!*b.C30*!*b.C31*!*b.C32*!*a.C82*!*a.C83*!*a.C84*!*a.sales_Order*!*a.sales_Order_line","","","","JobHDWOPart",false)

f.Data.DataTable.Close("JobHD")
f.Data.DataTable.Close("JobHDUsr")

f.Data.linq.Join("LeftJoin","DataTable","JobOps*!*a","DataTable","JobHDWOPart*!*b","a.job=b.job AND a.suffix = b.suffix","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*b.C02*!*b.C03*!*b.C04*!*b.C05*!*b.C07*!*b.C08*!*b.C09*!*b.C10*!*b.C11*!*b.C12*!*b.C13*!*b.C14*!*b.C15*!*b.C16*!*b.C17*!*b.C18*!*b.C19*!*b.C20*!*b.C21*!*b.C22*!*b.C23*!*b.C24*!*b.C25*!*b.C26*!*b.C27*!*b.C28*!*b.C29*!*b.C30*!*b.C31*!*b.C32*!*a.C33*!*a.C34*!*a.C48*!*b.C82*!*b.C83*!*b.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*b.sales_Order*!*b.sales_Order_line","","","","WOSEQPART",false)

f.Data.DataTable.Close("JobHDWOPart")
f.Data.DataTable.Close("JobOps")
Function.Intrinsic.UI.ChangeWaitStatus("Compiling data from Order Entry", 80) 

f.data.DataTable.CreateFromSQL("SODet","Conx","Select RTRIM(a.order_no) as C63,RTRIM(b.order_type) as C64,RTRIM(b.customer_po) as C65,RTRIM(b.User_1 ) as C66,RTRIM(b.User_2) as C67,RTRIM(b.user_3) as C68,RTRIM(b.user_4) as C69,RTRIM(b.user_5) as C70, RTRIM(Left(a.record_no,3)) as C71, RTRIM(a.LINE_TYPE) as C72,RTRIM(a.part) as C73,RTRIM(a.info_1) as C74,RTRIM(a.info_2 ) as C75,RTRIM(a.GROUP_LINES) as C76,RTRIM(a.user_1) as C77, RTRIM(a.user_2) as C78, RTRIM(a.user_3) as C79, RTRIM(a.user_4) as C80, RTRIM(a.user_5) as C81 from v_order_lines a inner join V_order_header b on a.order_no = b.Order_no")

f.Data.linq.Join("LeftJoin","DataTable","WOSEQPART*!*a","DataTable","SODet*!*b","a.sales_Order=b.C63 AND a.sales_Order_line = b.C71","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*a.C48*!*b.C63*!*b.C64*!*b.C65*!*b.C66*!*b.C67*!*b.C68*!*b.C69*!*b.C70*!*b.C71*!*b.C72*!*b.C73*!*b.C74*!*b.C75*!*b.C76*!*b.C77*!*b.C78*!*b.C79*!*b.C80*!*b.C81*!*a.C82*!*a.C83*!*a.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91","","","","WOSO",false)

f.Data.DataTable.Close("WOSEQPART")
f.Data.DataTable.Close("SODet")

f.Data.DataTable.CreateFromSQL("InvDT","Conx","select RTRIM(a.Part) as part, RTRIM(a.location) as location,RTRIM(a.Description) as C06,RTRIM(a.Bin) as C35,RTRIM(a.CODE_SORT) as C36,RTRIM(b.Name_vendor) as C37,RTRIM(b.Text_info1) as C38,RTRIM(b.Text_info2) as C39,RTRIM(b.LBS) as C40,RTRIM(C.Stock_Bin) as C41, b.length as C42, b.width as C43,c.thickness as C44,a.Density_raw_matl as C45,RTRIM(b.description_2) as C46,RTRIM(b.description_3) as C47 from V_INVENTORY_MSTR a left Outer join V_INVENTORY_MST2 b on a.part = b.part and a.location = b.location left outer join V_INVENTORY_MST3 c on a.part = c.part and a.location = c.location")

f.Data.linq.Join("LeftJoin","DataTable","WOSO*!*a","DataTable","InvDT*!*b","a.C05=b.part AND a.C84 = b.location","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*b.C06*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*b.C35*!*b.C36*!*b.C37*!*b.C38*!*b.C39*!*b.C40*!*b.C41*!*b.C42*!*b.C43*!*b.C44*!*b.C45*!*b.C46*!*b.C47*!*a.C48*!*a.C63*!*a.C64*!*a.C65*!*a.C66*!*a.C67*!*a.C68*!*a.C69*!*a.C70*!*a.C71*!*a.C72*!*a.C73*!*a.C74*!*a.C75*!*a.C76*!*a.C77*!*a.C78*!*a.C79*!*a.C80*!*a.C81*!*a.C82*!*a.C83*!*a.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91","","","","WOSOFG",false)

f.Data.DataTable.Close("WOSO")
f.Data.DataTable.Close("InvDT")

Function.Intrinsic.UI.ChangeWaitStatus("Compiling data from Inventory", 90) 
f.Data.DataTable.CreateFromSQL("InvDT","Conx","select RTRIM(a.Part) as Part, RTRIM(a.location) as location,RTRIM(a.Product_line) as C49,RTRIM(a.Description) as C87,RTRIM(a.Bin) as C50,RTRIM(a.CODE_SORT) as C51,RTRIM(b.Name_vendor) as C52,RTRIM(b.Text_info1) as C53,RTRIM(b.Text_info2) as C54,b.LBS as C55,RTRIM(C.Stock_Bin) as C56, b.length as C57, b.width as C58,c.thickness as C59,a.Density_raw_matl as C60,RTRIM(b.description_2) as C61,RTRIM(b.description_3) as C62,RTRIM(left(a.part,17)) as C85, RTRIM(Right(a.part,3)) as C86 from V_INVENTORY_MSTR a left Outer join V_INVENTORY_MST2 b on a.part = b.part and a.location = b.location left outer join V_INVENTORY_MST3 c on a.part = c.part and a.location = c.location")

f.Data.linq.Join("LeftJoin","DataTable","WOSOFG*!*a","DataTable","InvDT*!*b","a.C48=b.part AND a.C84 = b.location","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C06*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*a.C35*!*a.C36*!*a.C37*!*a.C38*!*a.C39*!*a.C40*!*a.C41*!*a.C42*!*a.C43*!*a.C44*!*a.C45*!*a.C46*!*a.C47*!*a.C48*!*b.C49*!*b.C50*!*b.C51*!*b.C52*!*b.C53*!*b.C54*!*b.C55*!*b.C56*!*b.C57*!*b.C58*!*b.C59*!*b.C60*!*b.C61*!*b.C62*!*a.C63*!*a.C64*!*a.C65*!*a.C66*!*a.C67*!*a.C68*!*a.C69*!*a.C70*!*a.C71*!*a.C72*!*a.C73*!*a.C74*!*a.C75*!*a.C76*!*a.C77*!*a.C78*!*a.C79*!*a.C80*!*a.C81*!*a.C82*!*a.C83*!*a.C84*!*b.C85*!*b.C86*!*b.C87*!*a.C88*!*a.C89*!*a.C90*!*a.C91","","","","WOSOINV",True)

f.Data.DataTable.Close("WOSOFG")
f.Data.DataTable.Close("InvDT")

f.Data.DataTable.AddColumn("WOSOINV","ST1","String")
f.Data.DataTable.AddColumn("WOSOINV","ST2","String")
f.Data.DataTable.AddColumn("WOSOINV","ST3","String")
f.Data.DataTable.AddColumn("WOSOINV","ST4","String")
f.Data.DataTable.AddColumn("WOSOINV","ST5","String")
f.Data.DataTable.AddColumn("WOSOINV","ST6","String")
f.Data.DataTable.AddColumn("WOSOINV","N_A","String")

f.Intrinsic.String.Build("Select distinct RTRIM(HARDCODE_VALUE)  from GCG_4980_NESTMAINT where PROFILE = '{0}' and MAPID = 'ST1'",v.Global.sProfile,v.Local.sSql)
f.odbc.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
f.Data.DataTable.SetValue("WOSOINV",-1,"ST1",v.Local.sRet)
f.Intrinsic.String.Build("Select distinct RTRIM(HARDCODE_VALUE)  from GCG_4980_NESTMAINT where PROFILE = '{0}' and MAPID = 'ST2'",v.Global.sProfile,v.Local.sSql)
f.odbc.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
f.Data.DataTable.SetValue("WOSOINV",-1,"ST2",v.Local.sRet)

f.Intrinsic.String.Build("Select distinct RTRIM(HARDCODE_VALUE)  from GCG_4980_NESTMAINT where PROFILE = '{0}' and MAPID = 'ST3'",v.Global.sProfile,v.Local.sSql)
f.odbc.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
f.Data.DataTable.SetValue("WOSOINV",-1,"ST3",v.Local.sRet)
f.Intrinsic.String.Build("Select distinct RTRIM(HARDCODE_VALUE)  from GCG_4980_NESTMAINT where PROFILE = '{0}' and MAPID = 'ST4'",v.Global.sProfile,v.Local.sSql)
f.odbc.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
f.Data.DataTable.SetValue("WOSOINV",-1,"ST4",v.Local.sRet)

f.Intrinsic.String.Build("Select distinct RTRIM(HARDCODE_VALUE)  from GCG_4980_NESTMAINT where PROFILE = '{0}' and MAPID = 'ST5'",v.Global.sProfile,v.Local.sSql)
f.odbc.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
f.Data.DataTable.SetValue("WOSOINV",-1,"ST5",v.Local.sRet)
f.Intrinsic.String.Build("Select distinct RTRIM(HARDCODE_VALUE)  from GCG_4980_NESTMAINT where PROFILE = '{0}' and MAPID = 'ST6'",v.Global.sProfile,v.Local.sSql)
f.odbc.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
f.Data.DataTable.SetValue("WOSOINV",-1,"ST6",v.Local.sRet)

Function.Intrinsic.UI.ChangeWaitStatus("Data Compiled and ready for export", 100)
Program.Sub.Load4XP.End

Program.Sub.BoostXP.Start
v.Local.sSQL.Declare
v.Local.sFilter.Declare
v.Local.sMAPID.Declare
v.Local.sManCheck.Declare
v.Local.iCount.Declare
v.local.sOrderNo.declare
v.local.sDescription.declare
v.local.sCustomerOrderNo.declare
v.local.sCustomerName.declare
v.local.sCustomerNo.declare
v.local.sPartNo.declare
v.local.sOnlyPartNo.declare
v.local.sOnlyRevNo.declare
v.local.sPartNoExt.declare
v.local.sPartDescription.declare
v.local.sDrawingNo.declare
v.local.sCADFilename.declare
v.local.sAssembly.declare
v.local.sDueDate.declare
v.local.sPriority.declare
v.local.sDesiredQuantity.declare
v.local.sStatus.declare
v.local.sWorkplanName.declare
v.local.sMaterial.declare
V.Local.shold.Declare
V.Local.sDateHold.declare
V.Local.sTime.declare
V.Local.sDate.declare
V.Local.sdocName.declare


f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)

f.Intrinsic.String.Build("XMLDOC_{0}_{1}",v.Local.sDate,v.Local.sTime,v.Local.sdocName)

f.Intrinsic.String.Build("Select Enabled,XPFIELD,RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID,HARDCODE_VALUE from GCG_4980_NESTMAINT where profile = '{0}'",v.Global.sProfile,v.Local.sSQL)
f.intrinsic.UI.InvokeWaitDialog("Generating XML","Export 2 XML for BOOST")

f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)

' create the document
F.global.xml.createDocument(v.Local.sdocName,False,True,False,False)
'Dropped Y from Root per Jones Metal.
F.global.xml.SetRoot(v.Local.sdocName,"PPSImport")
''F.global.xml.SetRoot(v.Local.sdocName,"PPSYimport")

F.Global.XML.CreateAttributeNode(v.Local.sdocName,"Version","1.1")
F.Global.XML.SetAttributeToRoot(v.Local.sdocName,"Version")

' set new line text
F.Intrinsic.String.Concat(V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
'Dropped Y from Root per Jones Metal.
F.global.xml.AppendTextNode(v.Local.sdocName,"Root",V.Local.shold)
'F.global.xml.appendNode(v.Local.sdocName,"PPSYimport",V.Local.shold)
F.Global.XML.CreateElementNode(v.Local.sdocName,"ProductionOrders","")
F.Global.XML.AppendNodeToRoot(v.Local.sdocName,"ProductionOrders")

f.intrinsic.Control.For(v.Local.icount,0,v.DataTable.WOSOINV.RowCount--,1)
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'OrderNo'","")
	v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
	v.Local.sOrderNo.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
	f.Intrinsic.string.Replace(v.Local.sOrderNo,"--","-   -",v.Local.sOrderNo)
	f.Data.DataView.Close("FMapCheck","TempChkVw")
	
	' ======================== PRODUCTION ORDER	
	f.Intrinsic.String.Build("{0}{1}{1}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
	F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrders",V.Local.shold)
	f.Intrinsic.String.Build("{0}{1}{1}{1}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)

	' create ProductionOrder node, with attribute
	
	F.Global.XML.CreateElementNode(v.Local.sdocName,"ProductionOrder","")
	F.Global.XML.CreateAttributeNode(v.Local.sdocName,"OrderNo",V.Local.sOrderNo.trim)
	F.Global.XML.SetAttributeToNode(v.Local.sdocName,"ProductionOrder","OrderNo")
	F.Global.XML.DestroyNode(v.Local.sdocName,"OrderNo")
	F.global.xml.AppendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
	F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrders","ProductionOrder")
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'Description'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sDescription.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)

		f.Data.DataView.Close("FMapCheck","TempChkVw")
		
		F.Global.XML.CreateElementNode(v.Local.sdocName,"Description",V.Local.sDescription.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","Description")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"Description")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'CustomerOrderNo'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sCustomerOrderNo.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"CustomerOrderNo",V.Local.sCustomerOrderNo.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","CustomerOrderNo")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"CustomerOrderNo")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'CustomerName'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sCustomerName.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"CustomerName",V.Local.sCustomerName.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","CustomerName")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"CustomerName")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'CustomerNo'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sCustomerNo.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"CustomerNo",V.Local.sCustomerNo.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","CustomerNo")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"CustomerNo")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	'staber have their part revs setup as <Part> + <'R' + Rev>
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'PartNo'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sOnlyPartNo.Set(v.DataTable.WOSOINV(v.Local.iCount).C82!FieldValTrim)
		v.Local.sOnlyRevNo.Set(v.DataTable.WOSOINV(v.Local.iCount).C83!FieldValTrim)
		f.Intrinsic.Control.If(v.Local.sOnlyRevNo.Trim,<>,"")
			f.Intrinsic.string.Build("{0} R{1}",v.Local.sOnlyPartNo.Trim,v.Local.sOnlyRevNo.Trim,v.Local.sPartNo)
		f.Intrinsic.control.Else
			v.Local.sPartNo.Set(v.Local.sOnlyPartNo.Trim)
		f.Intrinsic.Control.EndIf
		
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"PartNo",V.Local.sPartNo.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","PartNo")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"PartNo")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'PartNoExt'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sPartNoExt.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"PartNoExt",V.Local.sPartNoExt.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","PartNoExt")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"PartNoExt")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'PartDescription'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sPartDescription.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"PartDescription",V.Local.sPartDescription.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","PartDescription")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"PartDescription")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'DrawingNo'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sDrawingNo.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"DrawingNo",V.Local.sDrawingNo.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","DrawingNo")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"DrawingNo")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'CADFilename'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sCADFilename.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Intrinsic.Control.If(v.DataView.ProfDT!ProfVw(0).FULL_PART_FLAG!fieldVal)
			f.Intrinsic.String.Build("{0}\{1}.dxf",v.DataView.ProfDT!ProfVw(0).FULL_PART_Path!fieldValtrim,v.Local.sCADFilename.trim,v.Local.sCADFilename)
		
		f.Intrinsic.Control.EndIf
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"CADFilename",V.Local.sCADFilename.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","CADFilename")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"CADFilename")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'Assembly'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sAssembly.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		
		f.Data.DataView.Close("FMapCheck","TempChkVw")

		F.Global.XML.CreateElementNode(v.Local.sdocName,"Assembly",V.Local.sAssembly.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","Assembly")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"Assembly")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'DueDate'","")
	v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
	v.Local.sDueDate.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
	f.Data.DataView.Close("FMapCheck","TempChkVw")
	
	F.Intrinsic.String.Split(V.Local.sDueDate,"/",V.Local.sDateHold)
	f.Intrinsic.Control.If(v.Local.sDateHold.UBound,>=,2)
		V.Local.sDateHold.RedimPreserve(0,2)
		F.Intrinsic.String.Build("{0}/{1}/{2}",V.Local.sDateHold(1).Trim,V.Local.sDateHold(0).Trim,V.Local.sDateHold(2).Trim,V.Local.sDueDate)
	f.Intrinsic.Control.EndIf
	F.Global.XML.CreateElementNode(v.Local.sdocName,"DueDate",V.Local.sDueDate.Trim)
	F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","DueDate")
	F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
	F.Global.XML.DestroyNode(v.Local.sdocName,"DueDate")
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'Priority'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sPriority.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		f.Data.DataView.Close("FMapCheck","TempChkVw")
		
		f.Intrinsic.Control.If(v.Local.sPriority.long,>,9)
			v.local.sPriority.set(9)
		f.Intrinsic.Control.Else
			v.Local.sPriority.Set(v.Local.sPriority.long)
		f.Intrinsic.Control.EndIf

		F.Global.XML.CreateElementNode(v.Local.sdocName,"Priority",V.Local.sPriority.Long)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","Priority")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"Priority")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'DesiredQuantity'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sDesiredQuantity.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		f.Data.DataView.Close("FMapCheck","TempChkVw")
		
		F.Global.XML.CreateElementNode(v.Local.sdocName,"DesiredQuantity",V.Local.sDesiredQuantity.trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","DesiredQuantity")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"DesiredQuantity")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'Status'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sStatus.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		f.Data.DataView.Close("FMapCheck","TempChkVw")
		
		F.Global.XML.CreateElementNode(v.Local.sdocName,"Status",V.Local.sStatus.trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","Status")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"Status")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'WorkplanName'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sWorkplanName.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		f.Data.DataView.Close("FMapCheck","TempChkVw")
		
		F.Global.XML.CreateElementNode(v.Local.sdocName,"WorkplanName",V.Local.sWorkplanName.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","WorkplanName")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"WorkplanName")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("FMapCheck","TempChkVw",22,"XPFIELD = 'Material'","")
	f.Intrinsic.control.If(v.DataView.FMapCheck!TempChkVw(0).Enabled!FieldVal,=,True)
		v.Local.sMAPID.set(v.DataView.FMapCheck!TempChkVw(0).MAPID!fieldValTrim)
		v.Local.sMaterial.Set(v.DataTable.WOSOINV(v.Local.iCount).[v.Local.sMAPID]!FieldValTrim)
		f.Data.DataView.Close("FMapCheck","TempChkVw")
		
		F.Global.XML.CreateElementNode(v.Local.sdocName,"Material",V.Local.sMaterial.Trim)
		F.Global.XML.AppendNode(v.Local.sdocName,"ProductionOrder","Material")
		F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.DestroyNode(v.Local.sdocName,"Material")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("FMapCheck","TempChkVw")
	f.Intrinsic.Control.EndIf
	
	F.Global.XML.DestroyNode(v.Local.sdocName,"ProductionOrder")

f.Intrinsic.Control.Next(v.Local.icount)
f.Intrinsic.String.Build("{0}{1}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
F.global.xml.appendTextNode(v.Local.sdocName,"ProductionOrders",V.Local.shold)
f.Intrinsic.String.Build("{0}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
F.Global.XML.DestroyNode(v.Local.sdocName,"ProductionOrders")
F.global.xml.appendTextNode(v.Local.sdocName,"Root",V.Local.shold)
F.Global.XML.AppendNodeToRoot(v.Local.sdocName,"ProductionOrders")
F.Global.XML.DestroyNode(v.Local.sdocName,"ProductionOrders")
f.Intrinsic.UI.CloseWaitDialog

F.global.xml.saveDocument(v.Local.sdocName,v.global.sXPPATH,ProdOrderImp.xml)
F.global.xml.CloseDocument(v.Local.sdocName)
f.Intrinsic.Control.CallSub(UpdateXP)
f.Data.DataTable.Close("FMapCheck")

f.Intrinsic.Control.if(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.Control.CallSub(PrintBarCodeWODet)
f.Intrinsic.Control.EndIf

f.Data.DataTable.Close("WOSOINV")
Program.Sub.BoostXP.End

Program.Sub.SNestXP.Start
v.Local.sMap.Declare
v.Local.sXP.Declare
v.Local.sDate.Declare
v.Local.sTime.Declare
v.Local.sOutfile.Declare
v.Local.sSQL.Declare

f.Intrinsic.String.Build("Select RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",v.Global.sProfile,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)
f.Data.DataView.Create("FMapCheck","FMapVw",22)
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)

f.Data.DataView.Close("FMapCheck","FMapVw")
f.Data.DataTable.Close("FMapCheck")

f.Intrinsic.String.Build("{0}@!@",v.Local.sMap,v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"*!*@!@","",v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"@!@","",v.Local.sMap)

f.Data.DataView.create("WOSOINV","XPVW",22)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,"12:00:00 AM","",v.Local.sXP)

f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
f.intrinsic.string.Build("{0}\SigmaNestXP_{1}_{2}.csv",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)

f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)
f.Intrinsic.Control.CallSub(UpdateXP)
f.Intrinsic.Control.if(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.Control.CallSub(PrintBarCodeWODet)
f.Intrinsic.Control.EndIf

f.Data.DataView.Close("WOSOINV","XPVW")
f.Data.DataTable.Close("WOSOINV")
Program.Sub.SNestXP.End

Program.Sub.NCellXP.Start
v.Local.sMap.Declare
v.Local.sXP.Declare
v.Local.sDate.Declare
v.Local.sTime.Declare
v.Local.sOutfile.Declare
v.Local.sSQL.Declare

f.Intrinsic.String.Build("Select RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",v.Global.sProfile,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)
f.Data.DataView.Create("FMapCheck","FMapVw",22)
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)

f.Data.DataView.Close("FMapCheck","FMapVw")
f.Data.DataTable.Close("FMapCheck")

f.Intrinsic.String.Build("{0}@!@",v.Local.sMap,v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"*!*@!@","",v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"@!@","",v.Local.sMap)

f.Data.DataView.create("WOSOINV","XPVW",22)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,"12:00:00 AM","",v.Local.sXP)

f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
f.intrinsic.string.Build("{0}\NCellXP_{1}_{2}.csv",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)

f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)
f.Intrinsic.Control.CallSub(UpdateXP)
f.Data.DataView.Close("WOSOINV","XPVW")
f.Data.DataTable.Close("WOSOINV")
Program.Sub.NCellXP.End

Program.Sub.PNestXP.Start
v.Local.sMap.Declare
v.Local.sXP.Declare
v.Local.sDate.Declare
v.Local.sTime.Declare
v.Local.sOutfile.Declare
v.Local.sSQL.Declare

f.Intrinsic.String.Build("Select RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",v.Global.sProfile,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)
f.Data.DataView.Create("FMapCheck","FMapVw",22)
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)

f.Data.DataView.Close("FMapCheck","FMapVw")
f.Data.DataTable.Close("FMapCheck")

f.Intrinsic.String.Build("{0}@!@",v.Local.sMap,v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"*!*@!@","",v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"@!@","",v.Local.sMap)

f.Data.DataView.create("WOSOINV","XPVW",22)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,"12:00:00 AM","",v.Local.sXP)

f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
f.intrinsic.string.Build("{0}\ProNestXP_{1}_{2}.csv",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)

f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)
f.Intrinsic.Control.CallSub(UpdateXP)
f.Data.DataView.Close("WOSOINV","XPVW")

f.Intrinsic.Control.if(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.Control.CallSub(PrintBarCodeWODet)
f.Intrinsic.Control.EndIf
f.Data.DataTable.Close("WOSOINV")
Program.Sub.PNestXP.End

Program.Sub.CustomXP.Start
v.Local.sMap.Declare
v.Local.sXP.Declare
v.Local.sDate.Declare
v.Local.sTime.Declare
v.Local.sOutfile.Declare
v.Local.sSQL.Declare

f.Intrinsic.String.Build("Select RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",v.Global.sProfile,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)
f.Data.DataView.Create("FMapCheck","FMapVw",22)
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)

f.Data.DataView.Close("FMapCheck","FMapVw")
f.Data.DataTable.Close("FMapCheck")

f.Intrinsic.String.Build("{0}@!@",v.Local.sMap,v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"*!*@!@","",v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"@!@","",v.Local.sMap)

f.Data.DataView.create("WOSOINV","XPVW",22)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,"12:00:00 AM","",v.Local.sXP)

f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
f.intrinsic.string.Build("{0}\CustomXP_{1}_{2}.csv",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)

f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)
f.Intrinsic.Control.CallSub(UpdateXP)
f.Data.DataView.Close("WOSOINV","XPVW")
f.Intrinsic.Control.if(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.Control.CallSub(PrintBarCodeWODet)
f.Intrinsic.Control.EndIf
f.Data.DataTable.Close("WOSOINV")
Program.Sub.CustomXP.End

Program.Sub.DrAbeXP.Start
v.Local.sMap.Declare
v.Local.sExpression.Declare
v.Local.sPartCol.Declare
v.Local.sXP.Declare
v.Local.sDate.Declare
v.Local.sTime.Declare
v.Local.sOutfile.Declare
v.Local.sSQL.Declare
v.Local.iCount.Declare

f.Intrinsic.String.Build("Select RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",v.Global.sProfile,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)
f.Data.DataView.Create("FMapCheck","FMapVw",22)
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)

f.Intrinsic.String.Split(v.Local.sMap,"*!*",v.Local.sPartCol)

f.Intrinsic.Control.If(v.DataView.ProfDT!ProfVw(0).FULL_PART_FLAG!fieldVal)
	f.Intrinsic.String.Build("'{0}\' + {1} + '.dxf'",v.DataView.ProfDT!ProfVw(0).FULL_PART_Path!fieldValtrim,v.Local.sPartCol(0),v.Local.sExpression)
	f.Intrinsic.String.Replace(v.Local.sMap,v.Local.sPartCol(0),"FullPart",v.Local.sMap)
	f.Data.DataTable.AddExpressionColumn("WOSOINV","FullPart","String",v.Local.sExpression)
f.Intrinsic.Control.EndIf

f.Data.DataView.Close("FMapCheck","FMapVw")
f.Data.DataTable.Close("FMapCheck")

f.Intrinsic.String.Build("{0}@!@",v.Local.sMap,v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"*!*@!@","",v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"@!@","",v.Local.sMap)

f.Data.DataView.create("WOSOINV","XPVW",22)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,"12:00:00 AM","",v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,".0000","",v.Local.sXP)

f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
f.intrinsic.string.Build("{0}\DrAbe_{1}_{2}.csv",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)

f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)
f.Intrinsic.Control.CallSub(UpdateXP)
f.Data.DataView.Close("WOSOINV","XPVW")
f.Intrinsic.Control.if(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.Control.CallSub(PrintBarCodeWODet)
f.Intrinsic.Control.EndIf
f.Data.DataTable.Close("WOSOINV")
Program.Sub.DrAbeXP.End

Program.Sub.OPSXP.Start
v.Local.sMap.Declare
v.Local.sFields.Declare
v.Local.sExpression.Declare
v.Local.sFieldHeader.Declare
v.Local.sPartCol.Declare
v.Local.sXP.Declare
v.Local.sDate.Declare
v.Local.sTime.Declare
v.Local.sOutfile.Declare
v.Local.sSQL.Declare
v.Local.iCount.Declare
v.Local.iPart.Declare
v.Local.iWC.Declare

f.Intrinsic.String.Build("Select RIGHT(CONCAT('C',RTRIM(MAPID)),3) as MAPID,UCASE(RTRIM(XPFIELD)) as XPFIELD,INDX from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",v.Global.sProfile,v.Local.sSQL)
f.Data.DataTable.CreateFromSQL("FMapCheck","Conx",v.Local.sSQL)
f.Data.DataView.Create("FMapCheck","FMapVw",22)
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)
f.Data.DataView.ToString("FMapCheck","FMapVw","XPFIELD","",",",v.Local.sFields)

f.Intrinsic.String.Split(v.Local.sMap,"*!*",v.Local.sPartCol)
f.Intrinsic.String.Split(v.Local.sFields,",",v.Local.sFieldHeader)

f.Data.DataView.SetFilter("FMapCheck","FMapVw","XPFIELD = 'PRODUCTION_DESC_1'")
v.Local.iPart.Set(v.DataView.FMapCheck!FMapVw(0).INDX!fieldvallong)

f.Data.DataView.SetFilter("FMapCheck","FMapVw","XPFIELD = 'WORK_CENTER'")

v.Local.iWC.Set(v.DataView.FMapCheck!FMapVw(0).INDX!fieldvallong)

f.Intrinsic.String.Build("Select RTRIM(WC) as WC, RTRIM(XREF) as XREF from GCG_4980_WCXREF where profile = '{0}'",v.Global.sProfile,v.Local.sSQL)
f.Data.Dictionary.CreateFromSQL("WCXrefDict","Conx",v.Local.sSQL)
f.Data.Dictionary.SetDefaultReturn("WCXrefDict","")
f.Data.DataTable.FillFromDictionary("WOSOINV","WCXrefDict",v.Local.sPartCol(v.Local.iWC))
f.Data.Dictionary.Close("WCXrefDict")

f.Intrinsic.String.Build("'L(' + {0} + ')'",v.Local.sPartCol(v.Local.iWC),v.Local.sExpression)

f.Data.DataTable.AddExpressionColumn("WOSOINV","FullWC","String",v.Local.sExpression)
f.Data.DataView.SetValue("FMapCheck","FMapVw",0,"MAPID","FullWC")

f.Intrinsic.Control.If(v.DataView.ProfDT!ProfVw(0).FULL_PART_FLAG!fieldVal)
	f.Intrinsic.String.Build("'L({0}' + {1} + '.dxf)'",v.DataView.ProfDT!ProfVw(0).FULL_PART_Path!fieldValtrim,v.Local.sPartCol(v.Local.iPart),v.Local.sExpression)
	f.Data.DataTable.AddExpressionColumn("WOSOINV","FullPart","String",v.Local.sExpression)
	f.Data.DataView.SetFilter("FMapCheck","FMapVw","XPFIELD = 'PRODUCTION_DESC_1'")
	f.Data.DataView.SetValue("FMapCheck","FMapVw",0,"MAPID","FullPart")
f.Intrinsic.Control.EndIf

f.Data.DataView.SetFilter("FMapCheck","FMapVw","")
f.Data.DataView.ToString("FMapCheck","FMapVw","MAPID","","*!*",v.Local.sMap)

f.Data.DataView.Close("FMapCheck","FMapVw")
f.Data.DataTable.Close("FMapCheck")
f.Intrinsic.String.Build("{0}@!@",v.Local.sMap,v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"*!*@!@","",v.Local.sMap)
f.Intrinsic.string.Replace(v.Local.sMap,"@!@","",v.Local.sMap)

f.Data.DataView.create("WOSOINV","XPVW",22)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Data.DataView.ToString("WOSOINV","XPVW",v.Local.sMap,",",v.Ambient.NewLine,v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,"12:00:00 AM","",v.Local.sXP)
f.Intrinsic.string.Replace(v.Local.sXP,".0000","",v.Local.sXP)
f.Intrinsic.String.build("{0}{1}{2}",v.Local.sFields.LCase,v.Ambient.NewLine,v.Local.sXP,v.Local.sXP)

f.Intrinsic.String.Format(v.Ambient.Date,"mmddyyyy",v.Local.sDate)
f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
f.intrinsic.string.Build("{0}\OPSXP_{1}_{2}.csv",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)
f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)
f.intrinsic.string.Build("{0}\OPSXP_{1}_{2}.syn",v.Global.sXPPATH,v.Local.sDate,v.Local.sTime,v.Local.sOutfile)
f.Intrinsic.File.String2File(v.Local.sOutFile,v.Local.sXP)

f.Intrinsic.Control.CallSub(UpdateXP)
f.Data.DataView.Close("WOSOINV","XPVW")
f.Intrinsic.Control.if(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.Control.CallSub(PrintBarCodeWODet)
f.Intrinsic.Control.EndIf
f.Data.DataTable.Close("WOSOINV")
Program.Sub.OPSXP.End

Program.Sub.Serialize.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare

V.Local.sSerialize.Declare
Gui.FNestExport.GsGCJobs.Serialize("JobsGrid",V.Local.sSerialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"JobsGrid",4980,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)

F.Intrinsic.Control.Catch
F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.Deserialize.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare

V.Local.sSerialize.Declare

F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"JobsGrid",4980,1000,6,"",V.Local.sSerialize)
F.Intrinsic.Control.If(V.Local.sSerialize,<>,"")
    Gui.FNestExport.GsGCJobs.Deserialize(V.Local.sSerialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.FNestExport_UnLoad.Start
f.Intrinsic.Control.CallSub(Serialize)
f.ODBC.Connection!conx.Close
f.Intrinsic.Control.End
Program.Sub.FNestExport_UnLoad.End

Program.Sub.ContextMenuItemSelection.Start
f.Intrinsic.Control.Try
	f.Intrinsic.Control.If(v.Args.ItemName,=,"SELECTF")
		f.Data.DataView.Create("JobData","SetVw",22,v.Global.sFilter,"")
		f.Data.DataView.SetValue("JobData","SetVw",-1,"Selected",True)
		f.Data.DataView.Close("JobData","SetVw")
	f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"USELECTF")
		f.Data.DataView.Create("JobData","SetVw",22,v.Global.sFilter,"")
		f.Data.DataView.SetValue("JobData","SetVw",-1,"Selected",False)
		f.Data.DataView.Close("JobData","SetVw")
	f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"SELECT")
		f.Data.DataView.SetValue("JobData","JobDataVw",-1,"Selected",True)
	
	f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"USELECT")
		f.Data.DataView.SetValue("JobData","JobDataVw",-1,"Selected",False)
		
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox("Oops! That didn't work. You may need to select/deselect the filtered jobs manually.")
f.Intrinsic.Control.EndTry
Program.Sub.ContextMenuItemSelection.End

Program.Sub.GsGCJobs_ColumnFilterChanged.Start
v.Global.sFilter.Set(v.Args.ActiveFilterExpression)
Program.Sub.GsGCJobs_ColumnFilterChanged.End

Program.Sub.LoadContextMenu.Start
Gui.FNestExport..ContextMenuCreate("JobsGrid")
Gui.FNestExport..ContextMenuAddItem("JobsGrid","SELECTF",0,"Select Filtered Rows")
Gui.FNestExport..ContextMenuAddItem("JobsGrid","USELECTF",0,"Deselect Filtered Rows")
Gui.FNestExport..ContextMenuAddItem("JobsGrid","SELECT",0,"Select All Rows")
Gui.FNestExport..ContextMenuAddItem("JobsGrid","USELECT",0,"Deselect All Rows")
Gui.FNestExport..ContextMenuSetItemEventHandler("JobsGrid","SelectF","ContextMenuItemSelection")
Gui.FNestExport..ContextMenuSetItemEventHandler("JobsGrid","USelectF","ContextMenuItemSelection")
Gui.FNestExport..ContextMenuSetItemEventHandler("JobsGrid","Select","ContextMenuItemSelection")
Gui.FNestExport..ContextMenuSetItemEventHandler("JobsGrid","USelect","ContextMenuItemSelection")
GUI.FNestExport.GsGCJobs.ContextMenuAttach("JobsGrid")
Program.Sub.LoadContextMenu.End

Program.Sub.PreFolderCheck.Start
v.Local.sFilePath.Declare
v.Local.sCustom.Declare
v.Local.bExists.Declare
v.Local.sXPPath.Declare
v.Local.sBCFile.Declare

f.Intrinsic.string.Build("{0}\CUSTOM",v.Caller.GlobalDir,v.Local.sFilePath)
f.Intrinsic.File.DirExists(v.Local.sFilePath,v.Local.bExists)
f.Intrinsic.Control.If(v.local.bExists,=,false)
	f.Intrinsic.File.CreateDir(v.Local.sFilePath)
f.Intrinsic.Control.EndIf

f.Intrinsic.string.Build("{0}\CUSTOM\NESTXP",v.Caller.GlobalDir,v.Local.sFilePath)
f.Intrinsic.File.DirExists(v.Local.sFilePath,v.Local.bExists)
f.Intrinsic.Control.If(v.local.bExists,=,false)
	f.Intrinsic.File.CreateDir(v.Local.sFilePath)
f.Intrinsic.Control.EndIf

f.Intrinsic.string.Build("{0}\CUSTOM\NESTXP\EXPORT",v.Caller.GlobalDir,v.Local.sFilePath)
f.Intrinsic.File.DirExists(v.Local.sFilePath,v.Local.bExists)
f.Intrinsic.Control.If(v.local.bExists,=,false)
	f.Intrinsic.File.CreateDir(v.Local.sFilePath)
f.Intrinsic.Control.EndIf

f.Intrinsic.string.Build("{0}\CUSTOM\NESTXP\EXPORT\GCG_4980_BCWODET_PRINT_{1}.dat",v.Caller.GlobalDir,v.Caller.Terminal,v.Global.sBarCodePath)

f.Intrinsic.File.Exists(v.Global.sBarCodePath,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists)
	gui.FNestExport.chkPrintBCWODetail.Value(1)
f.Intrinsic.Control.Else
	gui.FNestExport.chkPrintBCWODetail.Value(0)
f.Intrinsic.Control.EndIf
Program.Sub.PreFolderCheck.End

Program.Sub.UpdateXP.Start
f.Data.DataTable.AddColumn("WOSOINV","EXPORTED","STRING")
f.Data.DataTable.SetValue("WOSOINV",-1,"EXPORTED","Y")

f.Data.DataTable.SaveToDB("WOSOINV","Conx","JOB_HEADER","Job*!*Suffix",256,"Job@!@job*!*suffix@!@suffix*!*exported@!@exported")
Program.Sub.UpdateXP.End

Program.Sub.chkPrintBCWODetail_Click.Start
v.Local.bExists.Declare
f.Intrinsic.Control.If(v.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	f.Intrinsic.File.String2File(v.Global.sBarCodePath,"YAY")
f.Intrinsic.Control.Else
	f.Intrinsic.File.Exists(v.Global.sBarCodePath,v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Intrinsic.File.DeleteFile(v.Global.sBarCodePath)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf
Program.Sub.chkPrintBCWODetail_Click.End

Program.Sub.PrintBarCodeWODet.Start
v.Local.sJob.Declare
v.Local.sSuffix.Declare
v.Local.sParms.Declare
v.Local.icount.Declare
f.Intrinsic.control.For(v.Local.icount,0,v.DataTable.WOSOINV.RowCount--,1)
	v.Local.sJob.Set(v.DataTable.WOSOINV(v.Local.iCount).Job!fieldval)
	v.Local.sSuffix.Set(v.DataTable.WOSOINV(v.Local.iCount).Suffix!fieldval)
	f.Intrinsic.string.Build("{0}!*!{1}!*!1811",v.Local.sJob,v.Local.sSuffix,v.local.sParms)
	f.Global.General.CallWrapperSync(900100,v.Local.sParms)
f.Intrinsic.Control.Next(v.Local.icount)
Program.Sub.PrintBarCodeWODet.End

Program.Sub.OnlineUpdate.Start
'this sub is for automatically exporting all new jobs when Online update processes

F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

V.Local.sMessage.Declare(String)

F.ODBC.Connection!Conx.OpenCompanyConnection

'check if already running
F.Intrinsic.Control.CallSub(IsRunning)

'get default profile
F.Intrinsic.Control.CallSub(LoadDefaultProfile)

'check if auto export is set
F.Intrinsic.Control.If(V.Global.bAutoExport.Not)
	F.Intrinsic.Control.CallSub(OnlineUpdateClose)
F.Intrinsic.Control.EndIf

'load jobs
'F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", "Loading jobs...")
F.Intrinsic.Control.CallSub(OnlineUpdateLoadJobs)

'export jobs
F.Intrinsic.Control.If(V.DataTable.JobData.RowCount, >, 0)
	F.Intrinsic.String.Build("{0} eligible jobs found. Exporting...", V.DataTable.JobData.RowCount, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", V.Local.sMessage)
	F.Intrinsic.Control.CallSub(cmdXP_Click)
	F.Intrinsic.Control.CallSub(LogExportedJobs)
	F.Intrinsic.String.Build("Finished exporting {0} jobs. Exiting...", V.DataTable.JobData.RowCount, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", V.Local.sMessage)
F.Intrinsic.Control.Else
	'F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", "No eligible jobs found. Exiting...")
F.Intrinsic.Control.EndIf

'done, close
F.Intrinsic.Control.CallSub(OnlineUpdateClose)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdate.End

Program.Sub.LoadDefaultProfile.Start
'Load the default profile, handle if there is not one

F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

F.Data.DataTable.CreateFromSQL("dtDefaultProfile", "Conx", "select RTRIM(Profile) as PROFILE, RTRIM(EXPORT_FOLDER) as EXPORT_FOLDER, CUSTOM_EXPORT, RTRIM(XPTYPE) as XPTYPE, XP_ON_GENWO from GCG_4980_NESTPROFILE where DEFAULT_PROFILE = 1")

F.Intrinsic.Control.If(V.DataTable.dtDefaultProfile.RowCount, =, 0)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "Error: No default profile set.")
F.Intrinsic.Control.ElseIf(V.DataTable.dtDefaultProfile.RowCount, >, 1)
	'this shouldn't happen but check anyway
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", "Error: More than one default profile set.")
F.Intrinsic.Control.EndIf

V.Global.sProfile.Set(V.DataTable.dtDefaultProfile(0).PROFILE!FieldValTrim)
V.Global.bCustom.Set(V.DataTable.dtDefaultProfile(0).CUSTOM_EXPORT!FieldVal)
V.Global.sXPPATH.Set(V.DataTable.dtDefaultProfile(0).EXPORT_FOLDER!FieldValTrim)
V.Global.sXPtype.Set(V.DataTable.dtDefaultProfile(0).XPTYPE!FieldValTrim)
V.Global.bAutoExport.Set(V.DataTable.dtDefaultProfile(0).XP_ON_GENWO!FieldValTrim)

F.Data.DataTable.Close("dtDefaultProfile")

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.LoadDefaultProfile.End

Program.Sub.OnlineUpdateError.Start
'if an issue occurs, display a short wait dialog and add a log, then exit

F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

V.Local.sMessage.Declare(String)

V.Local.sMessage.Set(V.Args.Message)
F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", V.Local.sMessage)
F.Intrinsic.UI.InvokeWaitDialog(V.Local.sMessage, "Nesting Export Error")
F.Intrinsic.UI.Sleep(10)
F.Intrinsic.UI.CloseWaitDialog
F.Intrinsic.Control.CallSub(OnlineUpdateClose)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", V.Local.sError)
	F.Intrinsic.UI.InvokeWaitDialog(V.Local.sError, "Nesting Export Error")
	F.Intrinsic.UI.Sleep(10)
	F.Intrinsic.UI.CloseWaitDialog
	F.Intrinsic.Control.CallSub(OnlineUpdateClose)
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdateError.End

Program.Sub.OnlineUpdateLoadJobs.Start
'load all unexported jobs eligible for Nesting export

F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

V.Local.sSQL.Declare(String)

'currently not filtering by date... I would prefer to
V.Local.sSQL.Set("Select distinct RTRIM(JSS) as JSS, Cast(1 as BIT) as Selected, '' as EXPORTED from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y') and HOURTYPE = 1 and job + sfx not in (Select Job + suffix as JS from V_JOB_HEADER where exported = 'Y')")

'just create the list of jobs to pass into cmdXP_Click and Load4XP, all it needs is JSS and that dataview
F.Data.DataTable.CreateFromSQL("JobData", "Conx", V.Local.sSQL, True)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdateLoadJobs.End

Program.Sub.OnlineUpdateClose.Start
'check everything and then close

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)

'delete the is running file so the program will know it's not running next launch
F.Intrinsic.String.Build("{0}\Custom\NESTXP\IS_RUNNING\Running.txt", V.Caller.GlobalDir, V.Local.sFile)
F.Intrinsic.File.DeleteFile(V.Local.sFile)

'F.Intrinsic.Control.If(V.DataTable.dtDefaultProfile.Exists)
'	F.Data.DataTable.Close("dtDefaultProfile")
'F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.If(V.DataView.JobData!SelJobVw.Exists)
'	F.Data.DataView.Close("JobData", "SelJobVw")
'F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.If(V.DataTable.JobData.Exists)
'	F.Data.DataTable.Close("JobData")
'F.Intrinsic.Control.EndIf

F.ODBC.Connection!Conx.Close

''delete the is running file so the program will know it's not running next launch
'F.Intrinsic.String.Build("{0}\Custom\NESTXP\IS_RUNNING\Running.txt", V.Caller.GlobalDir, V.Local.sFile)
'F.Intrinsic.File.DeleteFile(V.Local.sFile)

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdateClose.End

Program.Sub.CheckDir.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

'check if the given import directories exist
'create them if they don't

V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)

V.Local.sPath.Set(V.Args.Path)
F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.File.CreateDir(V.Local.sPath)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.CheckDir.End

Program.Sub.CheckFile.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

'check if the given file exists
'create it if it doesn't

V.Local.sFile.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sContents.Declare(String)

V.Local.sFile.Set(V.Args.File)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0} {1}: Log Start", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sContents)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.CheckFile.End

Program.Sub.LOGGINGAddLog.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

'pass a project #/name, and a message
'date and time will be automatically added

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)

F.Intrinsic.string.Build("{0}\CUSTOM\NESTXP\LOG", V.Caller.GlobalDir, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDir, "Path", V.Local.sPath)

F.Intrinsic.String.Build("{0}\{1} Log.txt", V.Local.sPath, V.Local.sProject, V.Local.sFile)
F.Intrinsic.Control.CallSub(CheckFile, "File", V.Local.sFile)

F.Intrinsic.String.Build("{0} {1}: {2}", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sMessage, V.Local.sContents)
F.Intrinsic.File.Append2FileNewLine(V.Local.sFile, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.InvokeWaitDialog(V.Local.sError, "Nesting Export Error")
	F.Intrinsic.UI.Sleep(10)
	F.Intrinsic.UI.CloseWaitDialog
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.LOGGINGAddLog.End

Program.Sub.IsRunning.Start
'check if the process is already running
'store PID in a text file

F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

V.Local.bExists.Declare(Boolean)
V.Local.sDir.Declare(String)
V.Local.sCurrentPIDProcess.Declare(String)
V.Local.sFile.Declare(String)

F.Intrinsic.String.Build("{0}\Custom\NESTXP\IS_RUNNING\", V.Caller.GlobalDir, V.Local.sDir)
F.Intrinsic.Control.CallSub(CheckDir, "Path", V.Local.sDir)

F.Intrinsic.String.Build("{0}\Running.txt", V.Local.sDir, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)

F.Intrinsic.Control.If(V.Local.bExists.Not)
	'program is not running
	'Create Program Status file to let it know its running
	F.Intrinsic.File.String2File(V.Local.sFile, V.Ambient.PID)
F.Intrinsic.Control.Else
 	'then the file exists: get the PID from the file to see if the process is still running
	F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sCurrentPIDProcess)
	F.Intrinsic.Task.PIDRunning(V.Local.sCurrentPIDProcess, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists)
		'the the program is running- don't start new process
		F.Intrinsic.Control.CallSub(OnlineUpdateClose)
	F.Intrinsic.Control.Else
		'the program has stopped, but did not delete the file. Delete the file and create a new file for current run
		F.Intrinsic.File.DeleteFile(V.Local.sFile)
		
		F.Intrinsic.File.String2File(V.Local.sFile, V.Ambient.PID)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.IsRunning.End

Program.Sub.LogExportedJobs.Start
'Add the list of exported jobs to the log file

F.Intrinsic.Control.Try
V.Local.sError.Declare(String)

V.Local.iCounter.Declare(Long)
V.Local.sMessage.Declare(String)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)

F.Intrinsic.Control.If(V.DataTable.JobData.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.JobData.RowCount--, 1)
	V.Local.sJob.Set(V.DataTable.JobData(V.Local.iCounter).JSS!FieldVal)
	F.Intrinsic.String.Mid(V.Local.sJob, 6, 3, V.Local.sSuffix)
	F.Intrinsic.String.Build("Job {0}-{1}-{2} exported.", V.Local.sJob.Left6, V.Local.sSuffix, V.Local.sJob.Right6, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(LOGGINGAddLog, "Project", "Nesting Interface Export", "Message", V.Local.sMessage)
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.Control.CallSub(OnlineUpdateError, "Message", V.Local.sError)
F.Intrinsic.Control.EndTry
Program.Sub.LogExportedJobs.End
